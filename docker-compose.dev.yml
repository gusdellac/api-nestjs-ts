services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_server
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppass} 
    ports:
      - "${POSTGRES_PORT_EXTERNAL:-5432}:5432"
    volumes:
      - ./db_data:/var/lib/postgresql/data
  nest-app:
    container_name: nestjs-dev
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules # Volumen anónimo para node_modules
      - /usr/src/app/.pnpm-store  # Volumen anónimo para pnpm store
      # Montar el socket de Docker
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    environment:
      NODE_ENV: development
      PORT: ${PORT:-3000}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}  
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}  
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppass}
      POSTGRES_SSL: ${POSTGRES_SSL:-false}
      POSTGRES_SYNCHRONIZE: ${POSTGRES_SYNCHRONIZE:-true}
      JWT_SECRET: ${JWT_SECRET:-yourSecretKey}
      # Variables para Docker dentro del contenedor
      DOCKER_HOST: unix:///var/run/docker.sock
    depends_on:
      - postgres    
    # Agregar privilegios para acceder a Docker
    privileged: true