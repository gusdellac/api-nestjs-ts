# Etapa 1: Build
FROM node:22.16.0-alpine AS builder

# Instalar dependencias necesarias para la compilación
RUN apk add --no-cache git tzdata

# Establecer zona horaria
RUN cp /usr/share/zoneinfo/America/Argentina/Cordoba /etc/localtime && \
    echo "America/Argentina/Cordoba" > /etc/timezone

# Crear directorio de trabajo
WORKDIR /usr/src/app

# Copiar archivos de dependencias
COPY package.json pnpm-lock.yaml ./

# Instalar pnpm globalmente
RUN npm install -g pnpm

# Configurar el store de pnpm dentro del contenedor
RUN pnpm config set store-dir /usr/src/app/.pnpm-store

# Instalar dependencias (incluyendo las necesarias para compilar)
RUN pnpm install --frozen-lockfile

# Copiar el resto del código fuente
COPY . .

# Compilar el proyecto NestJS
RUN pnpm run build

###################################################

# Etapa 2: Runtime (imagen más liviana)
FROM node:22.16.0-alpine

# Establecer zona horaria
RUN apk add --no-cache tzdata && \
    cp /usr/share/zoneinfo/America/Argentina/Cordoba /etc/localtime && \
    echo "America/Argentina/Cordoba" > /etc/timezone

WORKDIR /usr/src/app

# Copiar dependencias necesarias para producción desde builder
COPY --from=builder /usr/src/app/package.json ./
COPY --from=builder /usr/src/app/pnpm-lock.yaml ./
COPY --from=builder /usr/src/app/.pnpm-store ./.pnpm-store

# Instalar solo dependencias de producción
RUN npm install -g pnpm && \
    pnpm config set store-dir /usr/src/app/.pnpm-store && \
    pnpm install --prod --frozen-lockfile

# Copiar el código compilado
COPY --from=builder /usr/src/app/dist ./dist

# Puerto que expone la app Nest
EXPOSE 3000

# Comando de inicio en producción
CMD ["pnpm", "run", "start:prod"]
